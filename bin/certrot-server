#!/bin/sh

set -e
set -u

# Required binaries
CAT=/bin/cat
ECHO=/bin/echo
GREP=/bin/grep
OPENSSL=/usr/bin/openssl
RM=/bin/rm

# Print usage message and exit.
usage() {
    ${ECHO} "${0}: status-path fingerprints.txt -connect example.com:443 -servername example.com [s_client options...] " >&2
    return 1
}

certrot_server_unexpected_cert_message() {
${CAT} <<EOT
Encountered unexpected server certificate

Expected certificate fingerprints:
${1}

Encountered certificate fingerprint:
${2}

${3}
EOT
}

# Writes a status message to a file if server uses an unexpected certificate.
#
# $1: Path to status file
# $2: Path to certs file
# $...: s_client options
certrot_server_update_status() {
    STATUSFILE="${1}"
    FPFILE="${2}"
    RESULT=1

    shift 2

    SERVERCERT=$(${OPENSSL} s_client "${@}" < /dev/null 2>/dev/null | ${OPENSSL} x509 2>/dev/null)
    SERVERFP=$(${ECHO} "${SERVERCERT}" | ${OPENSSL} x509 -noout -sha256 -fingerprint 2>/dev/null)

    if ! [ -r "${FPFILE}" ]; then
        ${ECHO} "Fingerprints file missing or not readable" 2>&1
    else
        if ${GREP} -q -x "${SERVERFP}" "${FPFILE}"; then
            ${RM} -f "${STATUSFILE}"
        else
            CERTTEXT=$(${ECHO} "${SERVERCERT}" | ${OPENSSL} x509 -text 2>/dev/null)
            FPLIST=$(${CAT} "${FPFILE}")
            certrot_server_unexpected_cert_message "${FPLIST}" "${SERVERFP}" "${CERTTEXT}" > "${STATUSFILE}"
        fi

        RESULT=0
    fi

    return ${RESULT}
}

if [ "${#}" -gt 1 ] && [ "${1:-}" != "-h" ] && [ "${1:-}" != "--help" ]; then
    certrot_server_update_status "${@}"
else
    usage
fi
